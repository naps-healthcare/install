---
kind: List
apiVersion: v1
items:

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: {{ app_name }}
      name: {{ frontend_service_name }}
    name: {{ frontend_service_name }}
  spec:
    port:
      targetPort: 8080-tcp
    subdomain: ""
    to:
      kind: Service
      name: {{ frontend_service_name }}
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: {{ app_name }}
      name: {{ frontend_service_name }}
    name: {{ frontend_service_name }}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: {{ app_name }}
      name: {{ frontend_service_name }}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      build: {{ frontend_service_name }}
    name: {{ frontend_service_name }}
  spec:
      dockerImageRepository: {{ emprostering_frontend_is_host }}

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: {{ app_name }}
      name: {{ frontend_service_name }}
    name: {{ frontend_service_name }}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: {{ app_name }}
      name: {{ frontend_service_name }}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: {{ app_name }}
          name: {{ frontend_service_name }}
          deploymentconfig: {{ frontend_service_name }}
      spec:
        containers:
          - env:
            - name: REACT_APP_BACKEND_URL
              value: http://{{ backend_service_name }}:8080
            imagePullPolicy: IfNotPresent
            name: {{ frontend_service_name }}
            ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 80
                protocol: TCP
            resources:
              limits:
                cpu: '500m'
                memory: '1Gi'
              requests:
                cpu: '250m'
                memory: '250Mi'
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts: []
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: {{ service_name }}
        serviceAccountName: {{ service_name }}
        terminationGracePeriodSeconds: 30
        volumes: []
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - {{ frontend_service_name }}
        from:
          kind: ImageStreamTag
          name: {{ frontend_service_name }}:{{ emprostering_frontend_is_tag }}
          namespace: {{ ocp_project }}
      type: ImageChange




