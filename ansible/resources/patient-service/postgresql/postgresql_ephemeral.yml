---
kind: List
apiVersion: v1
items:

- kind: Service
  apiVersion: v1
  metadata:
    name: {{ rdbms_app_name }}
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: {{ rdbms_app_name }}
  spec:
    ports:
    - name: {{ rdbms_app_name }}
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name: {{ rdbms_app_name }}
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}

- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: {{ rdbms_app_name }}
  stringData:
    database-name: {{ postgresql_database }}
    database-password: {{ postgresql_password }}
    database-user: {{ postgresql_username }}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
    name: {{ rdbms_app_name }}
    labels:
      app: {{ rdbms_app_name }}
  spec:
    replicas: 1
    selector:
      name: {{ rdbms_app_name }}
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
            - /bin/bash
            - /tmp/init-files/wait_for_rdbms.sh
            - /tmp/init-files/create_databases.sh
            containerName: postgresql
            volumes:
            - init-volume
          failurePolicy: Abort
        timeoutSeconds: 600
      resources:
        requests:
          cpu: "{{ psql_cpu_request }}"
          memory: "{{ psql_memory_request }}"
        limits:
          cpu: "{{ psql_cpu_limit }}"
          memory: "{{ psql_memory_limit }}"
      type: Recreate
    template:
      metadata:
        labels:
          name: {{ rdbms_app_name }}
      spec:
        serviceAccountName: "{{ service_name }}"
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: {{ rdbms_app_name }}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: {{ rdbms_app_name }}
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: {{ rdbms_app_name }}
          - name: POSTGRESQL_SERVICE
            value: {{ rdbms_app_name }}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: {{ rdbms_app_name }}-data
          - name: init-volume
            mountPath: /tmp/init-files
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: {{ rdbms_app_name }}-data
        - configMap:
            defaultMode: 493
            name: {{ rdbms_init_configmap }}
          name: init-volume
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:{{ postgresql_version }}
          namespace: "{{ postgresql_is_namespace }}"
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange

